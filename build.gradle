buildscript {
    ext {
        kotlinVersion = '1.2.30'
        springBootVersion = '2.0.0.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('nu.studer:gradle-jooq-plugin:2.0.11')
        classpath('gradle.plugin.com.boxfuse.client:gradle-plugin-publishing:5.0.7')
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'nu.studer.jooq'
apply plugin: 'idea'
apply plugin: 'org.flywaydb.flyway'
apply plugin: 'kotlin-kapt'

group = 'fr.ep.izigloo-ms'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
    main.java.srcDirs += [file("$buildDir/generated-src/jooq/main")]
}

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://plugins.gradle.org/m2/" }
}

compileKotlin {
    kotlinOptions.jvmTarget = 1.8
}
compileTestKotlin {
	kotlinOptions.jvmTarget = 1.8
}

ext {
	springCloudVersion = 'Finchley.M8'
}


idea {
    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
        compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
//  compile('io.opentracing.contrib:opentracing-spring-cloud-starter')
        compile('org.springframework.boot:spring-boot-starter-json')
        compile('org.springframework.boot:spring-boot-configuration-processor')

        compile('org.springframework.boot:spring-boot-starter-actuator')
        compile('io.micrometer:micrometer-registry-prometheus:1.0.0')

        compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion")
        compile("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")
        // shouldn't be required, but otherwise gradle's doing shit
        compile("org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion")

        compile('org.springframework.boot:spring-boot-starter-data-mongodb')
        compile('org.springframework.boot:spring-boot-starter-jooq')
        compile('org.flywaydb:flyway-core')
        compile('org.simpleflatmapper:sfm-jdbc:3.15.11')
        compile('org.postgresql:postgresql')
        jooqRuntime('org.postgresql:postgresql')

        compile('io.springfox:springfox-swagger2:2.8.0') {
            exclude group: 'org.springframework'
            exclude group: 'org.springframework.boot'
        }
        compile('io.springfox:springfox-swagger-ui:2.8.0') {
            exclude group: 'org.springframework'
            exclude group: 'org.springframework.boot'
        }

        compile('io.sentry:sentry-spring:1.7.0')

        compile('io.arrow-kt:arrow-core:0.6.1')
        compile('io.arrow-kt:arrow-typeclasses:0.6.1')
        compile('io.arrow-kt:arrow-data:0.6.1')
        compile('io.arrow-kt:arrow-instances:0.6.1')
        compile('io.arrow-kt:arrow-syntax:0.6.1')
        kapt('io.arrow-kt:arrow-annotations-processor:0.6.1')

        compile('com.fasterxml.jackson.core:jackson-databind')
        compile('com.fasterxml.jackson.core:jackson-annotations')
        compile('com.fasterxml.jackson.module:jackson-module-kotlin')

        testCompile('org.springframework.boot:spring-boot-starter-test')
        testCompile('com.nhaarman:mockito-kotlin:1.5.0')
        testCompile('com.h2database:h2:1.4.196')
        testCompile('org.junit.platform:junit-platform-runner:1.1.0')
        testImplementation('org.junit.jupiter:junit-jupiter-api')
        testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')

    }
    module {
        sourceDirs += files(
                'build/generated/source/kapt/main',
                'build/generated/source/kaptKotlin/main')
        generatedSourceDirs += files(
                'build/generated/source/kapt/main',
                'build/generated/source/kaptKotlin/main')
    }
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

jooq {
    version = '3.10.4'
    edition = 'OSS'
    main(sourceSets.main) {
        jdbc {
            driver = 'org.postgresql.Driver'
            url = "jdbc:postgresql://horton.elephantsql.com:5432/llkzubaj?currentSchema=public"
            user = "llkzubaj"
            password = "k0GmGLW-w0kKveQYvENRRdkvbI0a5Hva"
        }
        generator {
            name = 'org.jooq.util.DefaultGenerator'
            strategy {
                name = 'org.jooq.util.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.util.postgres.PostgresDatabase'
                inputSchema = 'public'
                includes = 'AjoutProduitCaracteristique|AjoutProduit|CalculTarif|ConditionAjoutProduitCaracteristique|ConditionAjoutProduit|ConditionOperator|VariableCalculTarif|variabletype'
            }
            generate {
                relations = true
                deprecated = false
                records = true
                daos=false
                routines=false
                immutablePojos = true
                javaTimeTypes=true
            }
            target {
                packageName = 'fr.ep.iziglooms.servicetarificationtravaux.persistence'
            }
        }
    }
}

flyway {
    url = "jdbc:postgresql://horton.elephantsql.com:5432/llkzubaj?currentSchema=public"
    user = "llkzubaj"
    password = "k0GmGLW-w0kKveQYvENRRdkvbI0a5Hva"
    schemas = ['public']
    baselineOnMigrate = true
}

generateMainJooqSchemaSource.dependsOn flywayMigrate
